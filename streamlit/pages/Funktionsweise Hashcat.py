import streamlit as st
from streamlit_extras.switch_page_button import switch_page

st.set_page_config(
    page_title="Funktionsweise von Hashcat",
    page_icon="üê±",
    initial_sidebar_state="collapsed",
)

hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

st.write("# Funktionsweise von Hashcat üê±")

st.markdown(
    """
   Hashcat behauptet von sich selbst das weltweit schnellste und fortschrittlichste Programm zur
   Passwortwiederherstellung zu sein.
   """
)


image = "streamlit/images/hc_logo.jpg"
st.image(image, caption='Hashcat Logo', width=450)

st.markdown(
    """
   Es unterst√ºtzt insgesamt f√ºnf verschiedene Angriffsmodus und √ºber 300 hochoptimierte Hashing-Algorithmen. 
   Hashcat wird allerdings nicht nur zur Passwortwiederherstellung verwendet, sondern auch bei Penetrationstests.
   Au√üerdem wird das Tool auch von Cyberkriminellen genutzt.
   
   Passw√∂rter sind eine g√§ngige Methode um sich zu authentifizieren, um seine Identit√§t nachzuweisen, beispielsweise
   bei der Anmeldung an einem Computer. Das Passwort wird in der Regel allerdings nicht als Klartext abgespeichert, 
   sondern als Hashwert, was zu mehr Sicherheit beitragen soll.
   Dieser Hashwert wird durch eine Hashfunktion berechnet (beispielsweise SHA256), Hashfunktionen sind 
   sogenannte Einwegfunktionen. Dies bedeutet, dass das Ergebnis nicht zur√ºckgerechnet werden kann.
   Hier ein Beispiel:<br>
   Wenn das Wort "Passwort" in die SHA256-Hashfunktion geben wird, kommt folgender Hash heraus: 
   "a36c101570cc4410993de5385ad7034adb2dae6a05139ac7672577803084634d". Es ist allerdings nicht m√∂glich aus dem Hash
   das Wort "Passwort" zur√ºckzurechnen.
   
   Hier kommt Hashcat ins Spiel, es versucht durch Ausprobieren heraus zu finden, welches Wort hinter dem Hash steckt.
   Es k√∂nnen dazu die folgenden Hashcat Methoden verwendet werden:
   * **W√∂rterbuchangriffe**: <br>Hashcat nimmt eine Liste mit Passw√∂rtern und probiert diese nach und nach durch.
   * **Kombinationsangriffe**: <br>Es werden mehrere W√∂rterb√ºcher (Passwortlisten) kombiniert.
   * **Maskenangriffe**: <br>Es werden Passw√∂rter in einem bestimmten Format ausprobiert (z.B. 10 Zeichen).
   * **Regelbasierte Angriffe**: <br>Eine Passwortliste wird durch bestimmte Regeln erweitert.
   * **Brute-Force-Angriffe**: <br>Es werden verschiedene Zeichenkombinationen ausprobiert.
   
   In diesem Projekt wurden regelbasierte Angriffe & W√∂rterbuchangriffe verwendet, um zu versuchen m√∂glichst viele
   Passw√∂rter zu knacken.
   Die Passwortliste 'rockyou.txt' wurde mit Regeln vergr√∂√üert und anschlie√üend diese Liste durchprobiert.
   
   
   """,
    unsafe_allow_html=True
)


st.markdown(
    """
    #### Was ist ein Generative Adverserial Network (GAN)?
    """
)

if st.button("Funktionsweise GAN"):
    switch_page("Funktionsweise GAN")
if st.button("Zur√ºck"):
    switch_page("Home")

st.divider()
st.markdown(
    """
    <style>
    body {
        font-size: 12px; 
    }    
    </style>
    <body>
    Quellen: <br>
    https://github.com/hashcat/hashcat<br>
    https://www.security-insider.de/was-ist-hashcat-a-1077200/<br>
    https://www.kali.org/tools/hashcat/
    </body>
    """,
    unsafe_allow_html=True
)



