import streamlit as st
from PIL import Image
from streamlit_extras.switch_page_button import switch_page

st.set_page_config(
    page_title="KI-500 Iterationen",
    page_icon="üìà",
    initial_sidebar_state="collapsed",
    layout="wide"
)

hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)


st.markdown(
    """
    <h1 style='text-align: center;'>
    K√ºnstliche Intelligenz vs. Hashcat mit 17 Regeln
    </h1>
    """,
    unsafe_allow_html=True
)

# Picture and Text
col0, col99 = st.columns(2)

col0.markdown(
    """
    <div align="center">

    | Passw√∂rter LinkedIn                | 60 516 679        |
    |------------------------------------|-------------------|
    | Gefundene Passw√∂rter PassGAN       | 2 342 207 (3,87%) |
    | Gefundene Passw√∂rter RockYou Datei | 2 937 754 (4,87%) |
    | Gefundene Passw√∂rter top-10 Regel  | 5 286 630 (8,90%) |

    </div><br>
    """,
    unsafe_allow_html=True
)


col99.markdown(
    """
    Hier werden die Ergebnisse von Hashcat und PassGAN verglichen und die Ergebnisse erl√§utert. Es wurden 200 Millionen
    Passw√∂rter sowohl von der KI als auch von Hashcat erzeugt. Diese wurden dann gegen die LinkedIn Liste verglichen. 
    Hashcat konnte mehr als doppelt so viele Passw√∂rter mit den 17 Regeln wieder herstellen als die von PassGAN 
    generierte Liste.
    """
)


# Picture and Text
col1, col2 = st.columns(2)

# Lade die beiden Bilder
image2_path = "streamlit/images/200k_utf-8_repair_normalverteilung_passwortl√§nge.jpg"
image1_path = "streamlit/images/train_utf-8_repair_normalverteilung_passwortl√§nge.jpg"
image3_path = "streamlit/images/crackedpw_ai_200k_cut_repair_normalverteilung_passwortl√§nge.jpg"

col2.markdown(
    """      
    ## L√§ngenverteilung Passw√∂rter PassGAN
    Die L√§ngenverteilung der Passw√∂rter, die von PassGAN generiert wurden, orientiert sich sehr stark an der 
    `rockyou.txt`. Um also ein Ergebnis zu bekommen, dass alle Paswortl√§ngen gleicherma√üen abdeckt, ist es wichtig eine
    Datei f√ºr das Training zu verwenden, die relativ gleich verteilt ist. Es k√∂nnte auch von Vorteil sein, sich vorher zu
    informieren, wie die Passwortrichtlinien des Unternehmens sind, von der die Datei stammt, die angegriffen  werden 
    soll.
    """
)
with col2:
    selected_image = st.radio("W√§hle ein Bild:", (
                                                "L√§ngenverteilung PassGAN",
                                                "L√§ngenverteilung rockyou.txt",
                                                "L√§ngenverteilung gefundene Passw√∂rter"))

if selected_image == "L√§ngenverteilung rockyou.txt":
    col1.image(image1_path, caption="L√§ngenverteilung rockyou.txt", use_column_width=True)
if selected_image == "L√§ngenverteilung PassGAN":
    col1.image(image2_path, caption="L√§ngenverteilung PassGAN", use_column_width=True)
if selected_image == "L√§ngenverteilung gefundene Passw√∂rter":
    col1.image(image3_path, caption="L√§ngenverteilung gefundene Passw√∂rter (PassGAN)", use_column_width=True)


# Picture and Text
col3, col4 = st.columns(2)

image1_path = "streamlit/images/hc_best15_sort_utf-8_repair_normalverteilung_passwortl√§nge.jpg"
image2_path = "streamlit/images/train_utf-8_repair_normalverteilung_passwortl√§nge.jpg"
image3_path = "streamlit/images/crackedpw_hc_best15_sort_cut_repair_normalverteilung_passwortl√§nge.jpg"

col4.markdown(
    """      
    ## L√§ngenverteilung Passw√∂rter Hashcat
    Die L√§ngen der von Hashcat generierten Passw√∂rter ist sehr viel gleich verteilter, als die von PassGAN. Das liegt 
    unter anderem daran, dass die Passw√∂rter mit einer Regel kopiert werden, aus "password" wird zum Beispiel 
    "passwordpassword". Das erkl√§rt auch die Ausrei√üer bei 12, 14 und 16 Zeichen langen Passw√∂rtern. Durch diese 
    gleich verteilte Liste, k√∂nnen mehr als doppelt so viele Passw√∂rter aus dem LinkedIn Leak wiederhergestellt werden.
    
    """
)
with col4:
    selected_image = st.radio("W√§hle ein Bild:", (
                                                "L√§ngenverteilung Hashcat",
                                                "L√§ngenverteilung rockyou.txt",
                                                "L√§ngenverteilung gefundene Passw√∂rter"))

if selected_image == "L√§ngenverteilung Hashcat":
    col3.image(image1_path, caption="L√§ngenverteilung Hashcat", use_column_width=True)
if selected_image == "L√§ngenverteilung rockyou.txt":
    col3.image(image2_path, caption="L√§ngenverteilung rockyou.txt", use_column_width=True)
if selected_image == "L√§ngenverteilung gefundene Passw√∂rter":
    col3.image(image3_path, caption="L√§ngenverteilung gefundene Passw√∂rter (Hashcat)", use_column_width=True)


# Picture and Text
col5, col6 = st.columns(2)

image1_path = "streamlit/images/200k_utf-8_repair_pw_complexity.jpg"
image2_path = "streamlit/images/train_utf-8_repair_pw_complexity.jpg"
image3_path = "streamlit/images/crackedpw_ai_200k_cut_repair_pw_complexity.jpg"

col6.markdown(
    """
    ## St√§rke der gefundenen Passw√∂rter PassGAN
    In den folgenden Abs√§tzen wird der Begriff Entropie angesprochen, dies ist ein Wert, welcher
    die St√§rke eines Passwortes definiert. Um so h√∂her der Entropie-Wert ist, um so sicherer ist ein Passwort.
    Der Passwortmanager KeePass stuft die Sicherheit der Passw√∂rter wie folgt ein.
    <div align="center">
    
    | Entropie in Bits | St√§rke |
    |------------------|--------------|
    | 0-64 | Sehr schwach |
    | 64-80 | Schwach |
    | 80-112 | M√§√üig |
    | 112-128 | Stark |
    | > 128 | Sehr Stark |
    
    </div><br>
    Es ist zu sehen, dass sich die Komplexit√§t der erzeugten Passw√∂rter wieder sehr stark an der Komplexit√§t der 
    Trainingsdatei orientiert. √úber die H√§lfte der generierten Passw√∂rter haben eine Komplexit√§t von 10 bis 20 Bit. Das kann
    unter anderem darauf zur√ºckgef√ºhrt werden, dass die von PassGAN generierten Passw√∂rter zum Gro√üteil eine L√§nge 
    zwischen 5 und 10 Zeichen haben. Da die Entropie der Passw√∂rter unmittelbar mit der L√§nge zusammenh√§ngt, ist es
    offensichtlich, dass k√ºrzere Passw√∂rter, die eine niedrigere Entropie haben, mit einer h√∂heren Wahrscheinlichkeit 
    gefunden werden. Dies ist bei den wiederhergestellten Passw√∂rtern sehr stark zu erkennen. Hier haben fast 80% eine 
    Entropie von 10 bis 20 Bit.
    """,
    unsafe_allow_html=True
)

with col6:
    selected_image = st.radio("W√§hle ein Bild:", (
                                                "Passw√∂rtkomplexit√§t PassGAN",
                                                "Passw√∂rtkomplexit√§t rockyou.txt",
                                                "Passworkomplexit√§t gefundene Passw√∂rter"))

if selected_image == "Passw√∂rtkomplexit√§t PassGAN":
    col5.image(image1_path, caption="Passw√∂rtkomplexit√§t PassGAN", use_column_width=True)
if selected_image == "Passw√∂rtkomplexit√§t rockyou.txt":
    col5.image(image2_path, caption="Passw√∂rtkomplexit√§t rockyou.txt", use_column_width=True)
if selected_image == "Passworkomplexit√§t gefundene Passw√∂rter":
    col5.image(image3_path, caption="Passworkomplexit√§t gefundene Passw√∂rter (PassGAN)", use_column_width=True)


# Picture and Text
col7, col8 = st.columns(2)

image1_path = "streamlit/images/hc_best15_sort_utf-8_repair_pw_complexity.jpg"
image2_path = "streamlit/images/train_utf-8_repair_pw_complexity.jpg"
image3_path = "streamlit/images/crackedpw_hc_best15_sort_cut_repair_pw_complexity.jpg"

col8.markdown(
    """
    ## St√§rke der gefundenen Passw√∂rter Hashcat
    Die Entropieverteilung der Passw√∂rter, die von Hashcat erstellt wurde, deckt ein breiteres Spektrum ab als die von 
    PassGAN erstellte Liste oder die `rockyou.txt`. Wie in dem Diagramm zu sehen ist, hat die Liste, die aus Hashcat
    Regeln erstellt wurde, viel mehr komplexere Passw√∂rter generiert. Dies hat im Umkehrschluss dazu beigetragen, dass
    mit dieser Liste mehr Passw√∂rter aus dem LinkedIn Leak wiederhergestellt werden konnten. 
    """
)

with col8:
    selected_image = st.radio("W√§hle ein Bild:", (
                                                "Passw√∂rtkomplexit√§t Hashcat",
                                                "Passw√∂rtkomplexit√§t rockyou.txt",
                                                "Passworkomplexit√§t gefundene Passw√∂rter"))

if selected_image == "Passw√∂rtkomplexit√§t Hashcat":
    col7.image(image1_path, caption="Passw√∂rtkomplexit√§t PassGAN", use_column_width=True)
if selected_image == "Passw√∂rtkomplexit√§t rockyou.txt":
    col7.image(image2_path, caption="Passw√∂rtkomplexit√§t rockyou.txt", use_column_width=True)
if selected_image == "Passworkomplexit√§t gefundene Passw√∂rter":
    col7.image(image3_path, caption="Passworkomplexit√§t gefundene Passw√∂rter (Hashcat)", use_column_width=True)

col9, col10 = st.columns(2)

col9.markdown(
    """
    ## Ben√∂tigte Zeit PassGAN
    PassGAN ben√∂tigt im Vergleich zu Hashcat sehr viel Zeit, um optimal trainiert zu werden. Der Generator, muss sich das
    Feedback des Diskriminators schlie√ülich aneignen. Die KI hat circa 24 Stunden ben√∂tigt, um sich auf dieses Level zu
    trainieren.\\
    Das ist ein sehr viel gr√∂√üerer Zeitraum als Hashcat ben√∂tigt hat. Hashcat hat f√ºr das hier vorgestellte Ergebnis 
    40 Minuten ben√∂tigt und hat mehr doppelt so viele Passw√∂rter wie PassGAN knacken k√∂nnen. Das macht Hashcat zum 
    Gewinner dieses Vergleichs.
    """
)

col10.markdown(
    """
    ## Vergleich Hashcat und PassGAN
    Hashcat hat im Vergleich zu PassGAN mehr als doppelt so viele Passw√∂rter wieder herstellen k√∂nnen. 
    Das hat mehrere Gr√ºnde. PassGAN h√§lt sich bei der Generierung der Passw√∂rter sehr stark an die Liste, an der sie 
    Trainiert wird. Das ist bei Hashcat nicht der Fall. Hashcat geht die bereitgestellten Regeln durch und wendet diese
    auf jedes Passwort an.\\
    Es ist allerdings sehr schwer, beide Programme miteinander zu vergleichen. Wenn die Zeit in die Bewertung mit 
    einflie√üt, gewinnt immer Hashcat, da es in den 24 Stunden, die PassGAN ben√∂tigt um optimal trainiert zu werden, sehr
    viel mehr regelbasierte Passw√∂rter erzeugen kann. 
    PassGAN kann zwar beeinflusst werden, wie das Training genau abl√§uft, aber Hashcat hat eine viel Umfangreichere 
    Dokumentation und vorgefertigte Regellisten, was es sehr einfach macht, mehr Passw√∂rter zu erzeugen.
    """
)

if st.button("Zur√ºck"):
    switch_page("Home")

st.divider()
st.markdown(
    """
    <style>
    #quellen {
    font-size: 12px; 
    } 
    </style>
    <div id="quellen">
    Quellen: <br>
    https://keepass.info/help/kb/pw_quality_est.html
    </div>
    """,
    unsafe_allow_html=True
)